pragma solidity ^0.4.24;


contract Milk {

    /// Variable for tracking Product Kepping Unit (PKU)
    uint upc;

    /// Variable for tracking Stock Louding Uint (SLU)
    uint sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => MilkItem) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Enumaration for defining variety of Drug State
    enum MilkState {
        Milked,                 // 0
        StoredInColdTank,       // 1
        InspectedOnFarm,        // 2
        TankShipped,            // 3
        StoredInHugeTank,       // 4
        InspectedOnBottlingFarm,// 5
        Bottled,                // 6
        Packed,                 // 7
        Delivered,              // 8
        OnSale,                 // 9
        Purchased,              // 10
        Consumed                // 11
    }


    /// Structure for keeping Drug Design fields structured
    struct MilkItem {
        uint sku;  // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        MilkState state;
        address cow; // Cow that made such tasteful milk
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string  originFarmName; // Farmer Name
        string  originFarmInformation;  // Farmer Information
        string  originFarmLatitude; // Farm Latitude
        string  originFarmLongitude;  // Farm Longitude
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        address bottlingFarmID; // Metamask-Ethereum address of the Retailer
        address transporterID; // Metamask-Ethereum address of the Retailer
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    /// Event to emit them for users in functions, accept `slu` as input as stock expected
    event CowMilked(uint upc, address cow);
    event StoredInFarm(uint upc);
    event OnFarmInspected(uint upc);
    event PickedFromFarm(uint upc);
    event ShippedToBottlingFarm(uint upc);
    event OnBottlingFarmInspected(uint upc);
    event Bottled(uint upc);
    event Packed(uint upc);
    event Shipped(uint upc);
    event ForSale(uint upc);
    event Purchased(uint upc);
    event Consumed(uint upc);

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        sku = 1;
        upc = 1;
    }

    // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isMilked(uint _upc) {
        require(items[_upc].state == MilkState.Milked, "Milk not ready");
        _;
    }
    // Define a modifier that checks if an item.state of a upc is CowMiStoredInColdTanklked
    modifier isStoredInColdTank(uint _upc) {
        require(items[_upc].state == MilkState.StoredInColdTank, "Milk not in farm cold tank");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is InspectedOnFarm
    modifier isInspectedOnFarm(uint _upc) {
        require(items[_upc].state == MilkState.InspectedOnFarm, "Milk pickable, it has not been inspected by farmer");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is TankShipped
    modifier isTankShipped(uint _upc) {
        require(items[_upc].state == MilkState.TankShipped, "Milk not loaded in truck");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is StoredInHugeTank
    modifier isStoredInHugeTank(uint _upc) {
        require(items[_upc].state == MilkState.StoredInHugeTank, "Milk not in bottling farm tank");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isInspectedOnBottlingFarm(uint _upc) {
        require(items[_upc].state == MilkState.InspectedOnBottlingFarm, "Milk not to be bottled, missing inspection");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isBottled(uint _upc) {
        require(items[_upc].state == MilkState.Bottled, "Milk not bottled");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isPacked(uint _upc) {
        require(items[_upc].state == MilkState.Packed, "Milk not packed");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isDelivered(uint _upc) {
        require(items[_upc].state == MilkState.Delivered, "Milk not delivered");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isOnSale(uint _upc) {
        require(items[_upc].state == MilkState.OnSale, "Milk not on sale");
        _;
    }
        // Define a modifier that checks if an item.state of a upc is CowMilked
    modifier isPurchased(uint _upc) {
        require(items[_upc].state == MilkState.Purchased, "Milk not purchased");
        _;
    }




  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string  originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC= items[_upc].upc;
  ownerID= items[_upc].ownerID;
  originFarmerID= items[_upc].originFarmerID;
  originFarmName= items[_upc].originFarmName;
  originFarmInformation= items[_upc].originFarmInformation;
  originFarmLatitude= items[_upc].originFarmLatitude;
  originFarmLongitude= items[_upc].originFarmLongitude;

    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address transporterID,
  address bottlingFarmID,
  address distributorID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
  itemUPC= items[_upc].upc;
  productID= items[_upc].productID;
  productNotes= items[_upc].productNotes;
  productPrice= items[_upc].productPrice;
  itemState= uint(items[_upc].state);
  transporterID= items[_upc].transporterID;
bottlingFarmID= items[_upc].bottlingFarmID;
  distributorID= items[_upc].distributorID;
  consumerID= items[_upc].consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  transporterID,
  bottlingFarmID,
  distributorID,
  consumerID
  );
  }

}